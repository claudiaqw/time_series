alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
geom_line(aes(x= date, y=pred_sum), color = '#00AFBB',
alpha = 0.9, linetype = 2, size = 1)
xlab('FECHA') + ylab('Hipotecas')
grafico3 <- ggplot(data = all.preds) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
geom_line(aes(x= date, y=pred_sum), color = '#00AFBB',
alpha = 0.9, linetype = 2, size = 1) +
xlab('FECHA') + ylab('Hipotecas')
ggplotly(grafico3)
grafico3 <- ggplot(data = all.preds) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
geom_line(aes(x= date, y=pred_sum), color = '#52854C',
alpha = 0.9, linetype = 2, size = 1) +
xlab('FECHA') + ylab('Hipotecas')
ggplotly(grafico3)
grafico3 <- ggplot(data = all.preds) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
geom_line(aes(x= date, y=pred_sum), color = '#52854C',
alpha = 0.9, linetype = 2, size = 1) +
xlab('FECHA') + ylab('Hipotecas')
ggplotly(grafico3)
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12)**1(/lambda))
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12)**(1/lambda))
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12))
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12))**(1/lambda)
View(preds.sarima)
View(preds.sarima)
View(data.real)
View(data.real)
preds.calendar <- as.data.frame(predict(fit.calendar, n.ahead=12))**(1/lambda)
preds.calendar <- as.data.frame(predict(fit.calendar, n.ahead=12, newxreg=calendar.test))**(1/lambda)
View(preds.calendar)
View(preds.calendar)
View(preds.sarima)
View(preds.sarima)
View(preds.calendar)
View(preds.calendar)
fit.calendar$fitted
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(ggplot2)
library(plotly)
library(tseries)
library(lmtest)
library(MASS)
library(forecast)
library(caschrono)
library(timeDate)
library(tsoutliers)
original <- readxl::read_xlsx("./data/Hipotecas.xlsx")
original <- original[c('...1', '01 Álava', '20 Gipuzkoa', '48 Vizcaya')]
colnames(original) <- c('date', 'Alava', 'Gipuzkoa', 'Vizcaya')
original$date <- as.Date(paste(original$date, "01", sep = "-"), "%YM%m-%d")
original$total <- original$Alava + original$Gipuzkoa + original$Vizcaya
data <- original[c('date', 'total')]
data.train <- subset(data, year(data$date) != 2019)
data.test <- subset(data, year(data$date) == 2019)
data.train.ts <- as.ts(data.train$total, frequency = 12)
data.test.ts <- as.ts(data.test$total, frequency=12)
ggplot(aes(x= date, y = total), data = data.train) +
geom_line(color = '#d84519', size = 1) +
xlab('FECHA') + ylab('Hipotecas')
box_cox <- boxcox(total ~ date,
data = data.train,
lambda = c(0, 0.5, 1))
lambda <- box_cox$x[which.max(box_cox$y)]
lambda
data.train$exp_total = data.train$total**lambda
data.test$exp_total = data.test$total**lambda
data.train.ts <- as.ts(data.train$exp_total, frequency = 12)
data.test.ts <- as.ts(data.test$exp_total, frequency=12)
adf.test(data.train.ts)
acf(data.train.ts, lag.max = 48, xlab = "Hipotecas",
main= "Función de autocorrelacion simple")
pacf(data.train.ts, lag.max = 48, xlab = "Hipotecas",
main = "Funcion de autocorrelacion parcial")
fit.1 <- Arima(data.train.ts,
order = c(1, 0, 0),
seasonal = list(order=c(0,0,0), period = 12),
method = 'ML')
fit.1
coeftest(fit.1)
cor.arma(fit.1)
Box.test.2(residuals(fit.1),
nlag = c(6, 12, 18, 24, 30, 36, 48))
acf(fit.1$residuals, lag.max = 100, xlab = "Hipotecas",
main= "Función de autocorrelacion simple")
pacf(fit.1$residuals, lag.max = 100, xlab = "Hipotecas",
main = "Funcion de autocorrelacion parcial")
fit.2 <- Arima(data.train.ts,
order = c(1, 0, 0),
seasonal = list(order = c(1, 0, 0), period=12),
method = 'ML')
fit.2
coeftest(fit.2)
cor.arma(fit.2)
Box.test.2(residuals(fit.2),
nlag = c(6, 12, 18, 24, 30, 36, 48))
acf(fit.2$residuals, lag.max = 48, xlab = "Hipotecas",
main = "Funcion de autocorrelacion simple")
fit.3 <- Arima(data.train.ts,
order = c(1, 0, 1),
seasonal = list(order = c(1, 0, 0), period=12),
method = 'ML')
fit.3
coeftest(fit.3)
cor.arma(fit.3)
Box.test.2(residuals(fit.3),
nlag = c(6, 12, 18, 24, 30, 36, 48))
acf(fit.3$residuals, lag.max = 48, xlab = "Hipotecas",
main = "Funcion de autocorrelacion simple")
pacf(fit.3$residuals, lag.max = 48, xlab = "Hipotecas",
main = "Funcion de autocorrelacion parcial")
fit.4 <- Arima(data.train.ts,
order = c(0, 1, 1),
seasonal = list(order = c(1, 0, 0), period=12),
method = 'ML')
fit.4
coeftest(fit.4)
fit.4 <- Arima(data.train.ts,
include.constant = T,
order = c(0, 1, 1),
seasonal = list(order = c(1, 0, 0), period=12),
method = 'ML')
fit.4
coeftest(fit.4)
fit.4 <- Arima(data.train.ts,
order = c(0, 1, 1),
seasonal = list(order = c(1, 0, 0), period=12),
method = 'ML')
fit.4
coeftest(fit.4)
cor.arma(fit.4)
Box.test.2(residuals(fit.4),
nlag = c(6, 12, 18, 24, 30, 36, 48))
acf(fit.4$residuals, lag.max = 72, xlab = "Hipotecas",
main = "Funcion de autocorrelacion simple")
calculoExplicativasCalendario <- function(variableFecha, domingoYFestivosJuntos){
#######################################
#     Creaci?n de todas las fechas    #
#######################################
# Se crean las fechas a nivel diario entre una primera y una ?ltima fecha dada.
# Para llegar al ?ltimo d?a del mes de la ?ltima fecha, se suman d?as para llegar
# al 28/29, 30 o 31 seg?n proceda.
if (month(max(variableFecha)) %in% c(1,3,5,7,8,10,12)) {
diasHastaFinMes <- 30
} else if (month(max(variableFecha)) %in% c(4,6,9,11)) {
diasHastaFinMes <- 29
} else if (year(max(variableFecha))%%4==0) {
diasHastaFinMes <- 28
} else {diasHastaFinMes <- 27}
todasLasFechas <- data.frame(fechas=seq(min(variableFecha),
max(variableFecha)+diasHastaFinMes,
by="days"))
domingoResurrecion <- as.Date(Easter(year(min(variableFecha)):year(max(variableFecha))))
lunesPascua <- domingoResurrecion+1
sabadoSanto <- domingoResurrecion-1
viernesSanto <- domingoResurrecion-2
juevesSanto <- domingoResurrecion-3
# Se unen y ordenan todos los d?as que forman la Semana Santa
semanaSanta <- sort(c(juevesSanto, viernesSanto, sabadoSanto, domingoResurrecion, lunesPascua))
# Se pone en formato data.frame y se a?ade un indicador
semanaSanta <- data.frame(fechas=semanaSanta, semanaSanta=rep(1,length(semanaSanta)))
# Se a?aden a la tabla maestra de fechas
todasLasFechas_2 <- merge(x = todasLasFechas, y = semanaSanta, by = "fechas", all.x = TRUE)
# Se reemplazan los NAs por 0, terminando de definir as? el indicador de SemanaSanta
todasLasFechas_2$semanaSanta[is.na(todasLasFechas_2$semanaSanta)] <- 0
######################################
#     CAlculo de la variable dt      #
######################################
# 1. Definici?n de festivos:
############################
calendario <- todasLasFechas
calendario$diaSemana <- as.factor(wday(calendario$fecha))
calendario$diaMes <- as.factor(day(calendario$fecha))
calendario$mes <- as.factor(month(calendario$fecha))
calendario$anyo <- as.factor(year(calendario$fecha))
calendario$p_01ene <- ifelse(calendario$diaMes==1 & calendario$mes==1, 1, 0)
calendario$p_06ene <- ifelse(calendario$diaMes==6 & calendario$mes==1, 1, 0)
calendario$p_19mar <- ifelse(calendario$diaMes==19 & calendario$mes==3, 1, 0)
calendario$p_01may <- ifelse(calendario$diaMes==1 & calendario$mes==5, 1, 0)
calendario$p_15ago <- ifelse(calendario$diaMes==15 & calendario$mes==8, 1, 0)
calendario$p_12oct <- ifelse(calendario$diaMes==12 & calendario$mes==10,1, 0)
calendario$p_01nov <- ifelse(calendario$diaMes==1 & calendario$mes==11, 1 ,0)
calendario$p_06dic <- ifelse(calendario$diaMes==6 & calendario$mes==12, 1 ,0)
calendario$p_08dic <- ifelse(calendario$diaMes==8 & calendario$mes==12, 1 ,0)
calendario$p_25dic <- ifelse(calendario$diaMes==25 & calendario$mes==12, 1 ,0)
calendario$festivo <- rowSums(subset(calendario, select=p_01ene:p_25dic))
# La definici?n de la variable dt var?a seg?n la opci?n domingoYFestivosJuntos.
if (domingoYFestivosJuntos==0){
calendario$sabado <- ifelse(calendario$diaSemana==7, 1 ,0)
calendario$domingo <- ifelse(calendario$diaSemana==1, 1 ,0)
# D?as laborables: todos menos s?bados y domingos
calendario$laborable <- 1-calendario$sabado-calendario$domingo
} else {
calendario$sabado <- ifelse(calendario$diaSemana==7, 1 ,0)
calendario$domingo <- ifelse(calendario$diaSemana==1, 1 ,0)
# Domingo=1 si domingo=1 o festivo=1
calendario$domingo <- ifelse(calendario$domingo==1 | calendario$festivo==1, 1 ,0)
# D?as laborables: todos menos s?bados y domingos/festivos
calendario$laborable <- 1-calendario$sabado-calendario$domingo
}
# 2. Definici?n de variable dt:
###############################
# Se filtran las columnas de inter?s y se a?ade la Semana Santa
calendario_2 <- calendario[, c("fechas", "mes", "anyo", "sabado", "domingo", "laborable", "festivo")]
todasLasFechasFinal <- merge(x = todasLasFechas_2, y = calendario_2,
by = "fechas", all.x = TRUE)
# Agregamos la serie a nivel a?o-mes
calendarioAnyoMes <- aggregate(todasLasFechasFinal[,c("sabado","domingo",
"laborable", "semanaSanta", "festivo")],
by=list(mes=todasLasFechasFinal$mes,
anyo=todasLasFechasFinal$anyo),
"sum")
# Se calcula la variable dt:
calendarioAnyoMes$dt <- calendarioAnyoMes$laborable-(5/2)*(calendarioAnyoMes$sabado+calendarioAnyoMes$domingo)
######################################
#     C?lculo de a?os bisiestos      #
######################################
calendarioAnyoMes$anyoNum <- as.numeric(levels(calendarioAnyoMes$anyo))[calendarioAnyoMes$anyo]
calendarioAnyoMes$bisiesto <- ifelse(calendarioAnyoMes$mes==2 &(calendarioAnyoMes$anyoNum %% 4)==0, 1 ,0)
#######################################################
#     Tabla final con explicativas de calendario      #
#######################################################
if (domingoYFestivosJuntos==0){
explicativasCalendario <- cbind(fecha=variableFecha, calendarioAnyoMes[, c("semanaSanta", "dt", "bisiesto", "festivo")])
} else {
explicativasCalendario <- cbind(fecha=variableFecha, calendarioAnyoMes[, c("semanaSanta", "dt", "bisiesto")])
}
return(explicativasCalendario)
}
exp.calendar.train <- calculoExplicativasCalendario(data.train$date,domingoYFestivosJuntos=0)
calendar.train <-
as.matrix(
exp.calendar.train[,c("semanaSanta", "dt", "bisiesto")])
fit.calendar <- Arima(data.train.ts,
order = c(0, 1, 1),
seasonal = list(order = c(1, 0, 0), period=12),
xreg = calendar.train,
method = 'ML')
fit.calendar
coeftest(fit.calendar)
cor.arma(fit.calendar)
Box.test.2(residuals(fit.calendar),
nlag = c(6, 12, 18, 24, 30, 36, 48))
acf(fit.calendar$residuals, lag.max = 48, xlab = "Hipotecas",
main = "Funcion de autocorrelacion simple")
outliers.train <- locate.outliers(fit.calendar$residuals,
pars = coefs2poly(fit.calendar),
types = c("AO", "LS", "TC"),cval=3)
outliers.train$abststat=abs(outliers.train$tstat)
data.train$ind <- as.numeric(row.names(data.train))
outliers.train.date <- merge(outliers.train, data.train[,c('ind', 'date')],  by = "ind")
arrange(outliers.train.date,desc(outliers.train.date$abststat))
exp.calendar.test <- calculoExplicativasCalendario(data.test$date,domingoYFestivosJuntos=0)
calendar.test <-
as.matrix(
exp.calendar.test[,c("semanaSanta", "dt", "bisiesto")])
preds <- as.data.frame(predict(fit.calendar, n.ahead=12, newxreg=calendar.test))
U <- (preds$pred + 2*preds$se)**(1/lambda)
L <- (preds$pred - 2*preds$se)**(1/lambda)
data.pred <- data.frame(date = data.test$date, pred = (preds$pred)**(1/lambda),
LimSup = U, LimInf =L)
data.real <- merge(data[,c("date","total")], data.pred, by = "date", all.x = T)
grafico1 <- ggplot(data = data.real) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
xlab('FECHA') + ylab('Hipotecas')
ggplotly(grafico1)
data.real$pred[year(data.real$date) != 2019] <- NA
grafico2 <- ggplot(data = data.real) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 0.8) +
geom_line(aes(x= date, y = pred), color = 'darkred',
size = 1)   +
geom_line(aes(x= date, y = LimSup), color = 'orange',
size = 1)  +
geom_line(aes(x= date, y = LimInf), color = 'orange',
size = 1) +
xlab('FECHA') + ylab('Hipotecas')
grafico2
data.alava.train <- subset(original, year(original$date) != 2019)[c('date', 'Alava')]
data.alava.test <- subset(original, year(original$date) == 2019)[c('date', 'Alava')]
data.alava.train$exp <- data.alava.train$Alava**lambda
data.alava.test$exp <- data.alava.test$Alava**lambda
data.alava.train.ts <- as.ts(data.alava.train$exp)
data.alava.test.ts <- as.ts(data.alava.test$exp)
exp.calendar.alava.train <- calculoExplicativasCalendario(data.alava.train$date,domingoYFestivosJuntos=0)
exp.calendar.alava.test <- calculoExplicativasCalendario(data.alava.test$date, domingoYFestivosJuntos = 0)
calendar.alava.train <-
as.matrix(
exp.calendar.alava.train[,c("semanaSanta", "dt", "bisiesto")])
calendar.alava.test <-
as.matrix(
exp.calendar.alava.test[,c("semanaSanta", "dt", "bisiesto")])
alava.fit <- auto.arima(data.alava.train.ts,
max.d=1, max.D=1,
max.p=2, max.P=2,
max.q=2, max.Q=2,
seasonal=TRUE,
ic="aic",
allowdrift=FALSE,
xreg=calendar.alava.train,
stepwise=TRUE)
alava.preds <- as.data.frame(predict(alava.fit, n.ahead=12, newxreg=calendar.alava.test))
data.gipuzkoa.train <- subset(original, year(original$date) != 2019)[c('date', 'Gipuzkoa')]
data.gipuzkoa.test <- subset(original, year(original$date) == 2019)
data.gipuzkoa.train$exp <- data.gipuzkoa.train$Gipuzkoa**lambda
data.gipuzkoa.test$exp <- data.gipuzkoa.test$Gipuzkoa**lambda
data.gipuzkoa.train.ts <- as.ts(data.gipuzkoa.train$exp, frequency = 12)
data.gipuzkoa.test.ts <- as.ts(data.gipuzkoa.test$exp, frequency = 12)
exp.calendar.gipuzkoa.train <- calculoExplicativasCalendario(data.gipuzkoa.train$date,domingoYFestivosJuntos=0)
exp.calendar.gipuzkoa.test <- calculoExplicativasCalendario(data.gipuzkoa.test$date, domingoYFestivosJuntos = 0)
calendar.gipuzkoa.train <-
as.matrix(
exp.calendar.gipuzkoa.train[,c("semanaSanta", "dt", "bisiesto")])
calendar.gipuzkoa.test <-
as.matrix(
exp.calendar.gipuzkoa.test[,c("semanaSanta", "dt", "bisiesto")])
gipuzkoa.fit <- auto.arima(data.gipuzkoa.train.ts,
max.d=1, max.D=1,
max.p=2, max.P=2,
max.q=2, max.Q=2,
seasonal=TRUE,
ic="aic",
allowdrift=FALSE,
xreg=calendar.gipuzkoa.train,
stepwise=TRUE)
gipuzkoa.preds <- as.data.frame(predict(gipuzkoa.fit, n.ahead=12, newxreg=calendar.gipuzkoa.test))
data.vizcaya.train <- subset(original, year(original$date) != 2019)[c('date', 'Vizcaya')]
data.vizcaya.test <- subset(original, year(original$date) == 2019)[c('date', 'Vizcaya')]
data.vizcaya.train$exp <- data.vizcaya.train$Vizcaya**lambda
data.vizcaya.test$exp <- data.vizcaya.test$Vizcaya**lambda
data.vizcaya.train.ts <- as.ts(data.vizcaya.train$exp, frequency = 12)
data.vizcaya.test.ts <- as.ts(data.vizcaya.test$exp, frequency = 12)
exp.calendar.vizcaya.train <- calculoExplicativasCalendario(data.vizcaya.train$date,domingoYFestivosJuntos=0)
exp.calendar.vizcaya.test <- calculoExplicativasCalendario(data.vizcaya.test$date, domingoYFestivosJuntos = 0)
calendar.vizcaya.train <-
as.matrix(
exp.calendar.vizcaya.train[,c("semanaSanta", "dt", "bisiesto")])
calendar.vizcaya.test <-
as.matrix(
exp.calendar.vizcaya.test[,c("semanaSanta", "dt", "bisiesto")])
vizcaya.fit <- auto.arima(data.vizcaya.train.ts,
max.d=1, max.D=1,
max.p=2, max.P=2,
max.q=2, max.Q=2,
seasonal=TRUE,
ic="aic",
allowdrift=FALSE,
xreg=calendar.vizcaya.train,
stepwise=TRUE)
viscaya.preds <- as.data.frame(predict(vizcaya.fit, n.ahead=12, newxreg=calendar.vizcaya.test))
data.pred.alava <- data.frame(date = data.test$date, pred = (alava.preds$pred)**(1/lambda))
data.pred.gipuzkoa <- data.frame(date = data.test$date, pred = (gipuzkoa.preds$pred)**(1/lambda))
data.pred.viscaya <- data.frame(date = data.test$date, pred = (viscaya.preds$pred)**(1/lambda))
data.pred.sum <- data.frame(date = data.test$date, pred_sum = (data.pred.alava$pred + data.pred.gipuzkoa$pred + data.pred.viscaya$pred))
all.preds <- merge(data.real, data.pred.sum, by = "date", all.x = T)
grafico3 <- ggplot(data = all.preds) +
geom_line(aes(x= date, y = total), color = 'steelblue',
alpha = 0.8, size = 1) +
geom_line(aes(x= date, y = pred), color = 'darkred',
alpha = 0.9, linetype = 2, size = 1) +
geom_line(aes(x= date, y=pred_sum), color = '#52854C',
alpha = 0.9, linetype = 2, size = 1) +
xlab('FECHA') + ylab('Hipotecas')
ggplotly(grafico3)
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12, newxreg = ))**(1/lambda)
preds <- as.data.frame(fitted()**(1/lambda)
preds.calendar <- as.data.frame(predict(fit.calendar, n.ahead=12, newxreg=calendar.test))**(1/lambda)
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12, newxreg = data.test.ts ))**(1/lambda)
preds.sarima <- as.data.frame(predict(fit.4, n.ahead=12))**(1/lambda)
View(preds.sarima)
View(preds.sarima)
preds.sarima <- as.data.frame(fit.4$fitted)
preds.sarima <- as.data.frame(fit.4$fitted)
View(preds.sarima)
preds.sarima <- as.data.frame(fit.4$fitted)**(1/lambda)
View(preds.sarima)
View(preds.sarima)
View(data.train)
View(data.train)
View(preds.sarima)
preds.sarima <- as.data.frame(fit.4$fitted)**(1/lambda)
names(preds.sarima) <- c("SARIMA(0, 1, 1)x(1,0,0)[12]")
real_predictions <- cbind(data.train,preds.sarima)
View(real_predictions)
View(real_predictions)
real_predictions <- cbind(data.train,preds.sarima, preds.calendar, preds.sum)
preds.sum <- as.data.frame(alava.fit$fitted)**(1/lambda) + as.data.frame(gipuzkoa.fit$fitted)**(1/lambda) + as.data.frame(vizcaya.fit$fitted)**(1/lambda)
names(preds.sum) <- c("AUTOARIMA")
real_predictions <- cbind(data.train,preds.sarima, preds.calendar, preds.sum)
preds.sarima <- as.data.frame(fit.4$fitted)**(1/lambda)
View(preds.sarima)
View(preds.sarima)
preds.calendar <- as.data.frame(fit.calendar$fitted)**(1/lambda)
preds.sum <- as.data.frame(alava.fit$fitted)**(1/lambda) + as.data.frame(gipuzkoa.fit$fitted)**(1/lambda) + as.data.frame(vizcaya.fit$fitted)**(1/lambda)
real_predictions <- cbind(data.train,preds.sarima, preds.calendar, preds.sum)
View(real_predictions)
View(real_predictions)
View(preds.sarima)
View(preds.sarima)
preds.sarima <- as.data.frame(fit.4$fitted)**(1/lambda)
names(preds.sarima) <- c("SARIMA(0, 1, 1)x(1,0,0)[12]")
preds.calendar <- as.data.frame(fit.calendar$fitted)**(1/lambda)
names(preds.calendar) <- c("SARIMA(0, 1, 1)x(1,0,0)[12] + calendario")
preds.sum <- as.data.frame(alava.fit$fitted)**(1/lambda) + as.data.frame(gipuzkoa.fit$fitted)**(1/lambda) + as.data.frame(vizcaya.fit$fitted)**(1/lambda)
names(preds.sum) <- c("AUTOARIMA")
real_predictions <- cbind(data.train,preds.sarima, preds.calendar, preds.sum)
View(real_predictions)
View(real_predictions)
real_predictions$monthly.MAPE.sarima <- abs(100*(real_predictions$total - real_predictions[c("real_predictions")])/real_predictions)
real_predictions$monthly.MAPE.sarima <- abs(100*(real_predictions$total -
real_predictions[c("SARIMA(0, 1, 1)x(1,0,0)[12]")])/real_predictions)
real_predictions$monthly.MAPE.sarima <- abs(100*(real_predictions$total -
real_predictions$`SARIMA(0, 1, 1)x(1,0,0)[12]`)/real_predictions)
real_predictions$total -
real_predictions$`SARIMA(0, 1, 1)x(1,0,0)[12]`
real_predictions$monthly.MAPE.sarima <- abs(100*(real_predictions$total -
real_predictions$`SARIMA(0, 1, 1)x(1,0,0)[12]`)/real_predictions$total)
real_predictions$monthly.MAPE.calendar <- abs(100*(real_predictions$total -
real_predictions$`SARIMA(0, 1, 1)x(1,0,0)[12] + calendario`)/real_predictions$total)
real_predictions$monthly.MAPE.autoarima <- abs(100*(real_predictions$total -
real_predictions$AUTOARIMA)/real_predictions$total)
global.MAPE.sarima <- mean(real_predictions$monthly.MAPE.sarima)
global.MAPE.calendar <- mean(real_predictions$monthly.MAPE.calendar)
globa.MAPE.autoarima <- mean(real_predictions$monthly.MAPE.autoarima)
global.MAPE.calendar
global.MAPE.sarima <- mean(real_predictions$monthly.MAPE.sarima)
global.MAPE.sarima
global.MAPE.calendar <- mean(real_predictions$monthly.MAPE.calendar)
global.MAPE.calendar
globa.MAPE.autoarima <- mean(real_predictions$monthly.MAPE.autoarima)
globa.MAPE.autoarima
View(data.pred.sum)
View(data.pred.sum)
View(all.preds)
View(all.preds)
preds <- all.preds[193:204,]
View(preds)
View(preds)
calendar.test
data.test
data.test.ts
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12, newxreg=data.test.ts))
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12))
preds_fit.4
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=15))
preds_fit.4
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12))
fit.4
data.test.ts
View(preds)
View(preds)
predsFut.sarima <- as.data.frame(predict(fit.4, ))
preds <- all.preds[193:204,]
as.data.frame(predict(fit.4, ))
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12))
colnames(preds_fit.4) <- c("pred.arima")
preds <- cbind(preds, preds_fit.4)
predsFut.sarima <- as.data.frame(predict(fit.4, ))
preds <- all.preds[193:204,]
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12))
colnames(preds_fit.4) <- c("pred.arima")
preds <- cbind(preds, preds_fit.4)
View(preds)
View(preds)
predsFut.sarima <- as.data.frame(predict(fit.4, ))
preds <- all.preds[193:204,]
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12))**(1/lambda)
colnames(preds_fit.4) <- c("pred.arima")
preds <- cbind(preds, preds_fit.4)
View(preds_fit.4)
View(preds_fit.4)
predict(fit.4, n.ahead=12)
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12)$pred)**(1/lambda)
colnames(preds_fit.4) <- c("pred.arima")
predsFut.sarima <- as.data.frame(predict(fit.4, ))
preds <- all.preds[193:204,]
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12)$pred)**(1/lambda)
colnames(preds_fit.4) <- c("pred.arima")
preds <- cbind(preds, preds_fit.4)
colnames(preds) <- c("date", "real", "calendar.pred", "LimSup", "LimInf", "sum.pred", "arima.pred")
preds <- all.preds[193:204,]
preds_fit.4 <- as.data.frame(predict(fit.4, n.ahead=12)$pred)**(1/lambda)
colnames(preds_fit.4) <- c("pred.arima")
preds <- cbind(preds, preds_fit.4)
colnames(preds) <- c("date", "real", "calendar.pred", "LimSup", "LimInf", "sum.pred", "arima.pred")
colnames(preds) <- c("date", "real", "calendar.pred", "LimSup", "LimInf", "sum.pred", "sarima.pred")
preds$monthly.MAPE.sarima <- abs(100*(preds$real - preds$sarima.pred)/preds$real)
preds$monthly.MAPE.sum <-  abs(100*(preds$real - preds$sum.pred)/preds$real)
preds$monthly.MAPE.calendar <- abs(100*(preds$real - preds$calendar.pred)/preds$real)
test.MAPE.sarima <- mean(preds$monthly.MAPE.sarima)
test.MAPE.sarima
test.MAPE.sum <- mean(preds$monthly.MAPE.sum)
test.MAPE.sum
test.MAPE.calendar <- mean(preds$monthly.MAPE.calendar)
test.MAPE.calendar
